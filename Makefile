drivers=sps30-i2c
clean_drivers=$(foreach d, $(drivers), clean_$(d))
release_drivers=$(foreach d, $(drivers), release/$(d))

.PHONY: FORCE all prepare $(release_drivers) $(clean_drivers) style-check style-fix

all: prepare $(drivers)

prepare: sps-common/sps_git_version.c

$(drivers): prepare
	cd $@ && $(MAKE) $(MFLAGS)

sps-common/sps_git_version.c: FORCE
	git describe --always --dirty | \
		awk 'BEGIN \
		{print "/* THIS FILE IS AUTOGENERATED */"} \
		{print "#include \"sps_git_version.h\""} \
		{print "const char * SPS_DRV_VERSION_STR = \"" $$0"\";"} \
		END {}' > $@ || echo "Can't update version, not a git repository"

$(release_drivers): sps-common/sps_git_version.c
	export rel=$@ && \
	export driver=$${rel#release/} && \
	export tag="$$(git describe --always --dirty)" && \
	export pkgname="$${driver}-$${tag}" && \
	export pkgdir="release/$${pkgname}" && \
	rm -rf "$${pkgdir}" && mkdir -p "$${pkgdir}" && \
	cp -r embedded-common/hw_i2c/ "$${pkgdir}" && \
	cp -r embedded-common/sw_i2c/ "$${pkgdir}" && \
	cp embedded-common/sensirion_arch_config.h "$${pkgdir}" && \
	cp embedded-common/sensirion_common.c "$${pkgdir}" && \
	cp embedded-common/sensirion_common.h "$${pkgdir}" && \
	cp embedded-common/sensirion_i2c.h "$${pkgdir}" && \
	cp -r sps-common/* "$${pkgdir}" && \
	cp -r $${driver}/* "$${pkgdir}" && \
	cp CHANGELOG.md LICENSE "$${pkgdir}" && \
	echo 'sps_driver_dir = .' >> $${pkgdir}/user_config.inc && \
	echo 'sensirion_common_dir = .' >> $${pkgdir}/user_config.inc && \
	echo 'sps_common_dir = .' >> $${pkgdir}/user_config.inc && \
	echo 'sps30_i2c_dir = .' >> $${pkgdir}/user_config.inc && \
	cd "$${pkgdir}" && $(MAKE) $(MFLAGS) && $(MAKE) clean $(MFLAGS) && cd - && \
	cd release && zip -r "$${pkgname}.zip" "$${pkgname}" && cd - && \
	ln -sfn $${pkgname} $@

release: clean $(release_drivers)

$(clean_drivers):
	export rel=$@ && \
	export driver=$${rel#clean_} && \
	cd $${driver} && $(MAKE) clean $(MFLAGS) && cd -

clean: $(clean_drivers)
	rm -rf release sps30-i2c/sps_git_version.c

style-fix:
	@if [ $$(git status --porcelain -uno 2> /dev/null | wc -l) -gt "0" ]; \
	then \
		echo "Refusing to run on dirty git state. Commit your changes first."; \
		exit 1; \
	fi; \
	git ls-files | grep -e '\.\(c\|h\|cpp\)$$' | xargs clang-format-6.0 -i -style=file;

style-check: style-fix
	@if [ $$(git status --porcelain -uno 2> /dev/null | wc -l) -gt "0" ]; \
	then \
		echo "Style check failed:"; \
		git diff; \
		git checkout -f; \
		exit 1; \
	fi;
